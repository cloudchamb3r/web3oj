// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./SumOfArrayProblem.sol";

contract MySumOfArray is ISumOfArray{
    function sum(uint[] memory _a) pure public override returns(uint) {
        unchecked { 
            uint ret;
            ret = ret + _a[0];
            ret = ret + _a[1];
            ret = ret + _a[2];
            ret = ret + _a[3];
            ret = ret + _a[4];
            ret = ret + _a[5];
            ret = ret + _a[6];
            ret = ret + _a[7];
            ret = ret + _a[8];
            ret = ret + _a[9];
            ret = ret + _a[10];
            ret = ret + _a[11];
            ret = ret + _a[12];
            ret = ret + _a[13];
            ret = ret + _a[14];
            ret = ret + _a[15];
            ret = ret + _a[16];
            ret = ret + _a[17];
            ret = ret + _a[18];
            ret = ret + _a[19];
            ret = ret + _a[20];
            ret = ret + _a[21];
            ret = ret + _a[22];
            ret = ret + _a[23];
            ret = ret + _a[24];
            ret = ret + _a[25];
            ret = ret + _a[26];
            ret = ret + _a[27];
            ret = ret + _a[28];
            ret = ret + _a[29];
            ret = ret + _a[30];
            ret = ret + _a[31];
            ret = ret + _a[32];
            ret = ret + _a[33];
            ret = ret + _a[34];
            ret = ret + _a[35];
            ret = ret + _a[36];
            ret = ret + _a[37];
            ret = ret + _a[38];
            ret = ret + _a[39];
            ret = ret + _a[40];
            ret = ret + _a[41];
            ret = ret + _a[42];
            ret = ret + _a[43];
            ret = ret + _a[44];
            ret = ret + _a[45];
            ret = ret + _a[46];
            ret = ret + _a[47];
            ret = ret + _a[48];
            ret = ret + _a[49];
            ret = ret + _a[50];
            ret = ret + _a[51];
            ret = ret + _a[52];
            ret = ret + _a[53];
            ret = ret + _a[54];
            ret = ret + _a[55];
            ret = ret + _a[56];
            ret = ret + _a[57];
            ret = ret + _a[58];
            ret = ret + _a[59];
            ret = ret + _a[60];
            ret = ret + _a[61];
            ret = ret + _a[62];
            ret = ret + _a[63];
            ret = ret + _a[64];
            ret = ret + _a[65];
            ret = ret + _a[66];
            ret = ret + _a[67];
            ret = ret + _a[68];
            ret = ret + _a[69];
            ret = ret + _a[70];
            ret = ret + _a[71];
            ret = ret + _a[72];
            ret = ret + _a[73];
            ret = ret + _a[74];
            ret = ret + _a[75];
            ret = ret + _a[76];
            ret = ret + _a[77];
            ret = ret + _a[78];
            ret = ret + _a[79];
            ret = ret + _a[80];
            ret = ret + _a[81];
            ret = ret + _a[82];
            ret = ret + _a[83];
            ret = ret + _a[84];
            ret = ret + _a[85];
            ret = ret + _a[86];
            ret = ret + _a[87];
            ret = ret + _a[88];
            ret = ret + _a[89];
            ret = ret + _a[90];
            ret = ret + _a[91];
            ret = ret + _a[92];
            ret = ret + _a[93];
            ret = ret + _a[94];
            ret = ret + _a[95];
            ret = ret + _a[96];
            ret = ret + _a[97];
            ret = ret + _a[98];
            ret = ret + _a[99];
            return ret;
        }
    }
}
